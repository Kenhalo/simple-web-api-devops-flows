name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: asia-southeast1
  REPOSITORY: demo-repo
  SERVICE: hello-world-api
  REGION: asia-southeast1

jobs:
  ci:
    runs-on: ubuntu-latest
    name: 'CI: Build, Test, and Scan'
    
    steps:
    - name: 'Checkout repository'
      uses: actions/checkout@v4

    - name: 'Setup Node.js'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 'Install dependencies'
      run: npm ci

    - name: 'Run ESLint'
      run: npm run lint

    - name: 'Run tests'
      run: npm test

    - name: 'Build Docker image for testing'
      run: docker build --no-cache -t  temp-security-scan:latest .

    - name: 'Install Trivy scanner'
      run: |
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy

    - name: 'Run Trivy vulnerability scanner'
      run: |
        # Disable VEX notice for cleaner output
        export TRIVY_DISABLE_VEX_NOTICE=true
        
        echo "Running security vulnerability scan..."
        
        # Focus on CRITICAL vulnerabilities (build-breaking)
        echo "Checking for CRITICAL vulnerabilities:"
        trivy image --severity CRITICAL --exit-code 1 temp-security-scan:latest
        
        # Show HIGH vulnerabilities but don't break the build
        echo ""
        echo "HIGH severity vulnerabilities (monitored):"
        trivy image --severity HIGH --exit-code 0 temp-security-scan:latest
        
        echo ""
        echo "Security scan summary:"
        echo "- CRITICAL vulnerabilities: NONE (build would fail)"
        echo "- HIGH vulnerabilities: Monitored and tracked for updates"
        echo "- Policy: Zero tolerance for CRITICAL, managed approach for HIGH"

  cd:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: ci
    runs-on: ubuntu-latest
    name: 'CD: Deploy to Cloud Run'
    
    steps:
    - name: 'Checkout repository'
      uses: actions/checkout@v4

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: 'Configure Docker to use gcloud as credential helper'
      run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

    - name: 'Generate version tag'
      id: version
      run: |
        VERSION=v$(date +%Y%m%d)-$(git rev-parse --short HEAD)
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "ðŸ“¦ Building version: $VERSION"

    - name: 'Build and push Docker image'
      run: |
        IMAGE_URI=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}
        
        echo "Building image: $IMAGE_URI:${{ steps.version.outputs.VERSION }}"
        docker build -t $IMAGE_URI:${{ steps.version.outputs.VERSION }} .
        docker tag $IMAGE_URI:${{ steps.version.outputs.VERSION }} $IMAGE_URI:latest
        
        echo "Pushing images to registry..."
        docker push $IMAGE_URI:${{ steps.version.outputs.VERSION }}
        docker push $IMAGE_URI:latest
        
        echo "Images pushed successfully"

    - name: 'Deploy to Cloud Run'
      id: deploy
      run: |
        echo "Deploying to Cloud Run..."
        gcloud run deploy ${{ env.SERVICE }} \
          --image=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:latest \
          --region=${{ env.REGION }} \
          --platform=managed \
          --allow-unauthenticated \
          --port=8080 \
          --memory=512Mi \
          --cpu=1 \
          --min-instances=0 \
          --max-instances=10 \
          --timeout=300s \
          --set-env-vars=NODE_ENV=production \
          --quiet

    - name: 'Get service URL and test'
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE }} --region=${{ env.REGION }} --format='value(status.url)')
        echo "Service deployed at: $SERVICE_URL"
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV
        
        # Test the deployed service
        echo "Testing deployed service..."
        sleep 10
        
        # Test main endpoint
        echo "Testing main endpoint..."
        curl -f "$SERVICE_URL" || exit 1
        
        # Test health endpoint  
        echo "Testing health endpoint..."
        curl -f "$SERVICE_URL/health" || exit 1
        
        echo "Service is responding correctly"
        echo "Deployment completed successfully!"